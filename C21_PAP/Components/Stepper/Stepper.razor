<MudContainer Style="min-width: 940px;">
    <CascadingValue Value="this">
        @ChildContent
        <MudTimeline Style="min-height: 240px;" TimelinePosition="TimelinePosition.Right" TimelineOrientation="TimelineOrientation.Horizontal">
            @for (int i = 0; i < Steps.Count; i += 1)
            {
                var copy = i;
                @Steps[copy].RenderStep(copy);
            }
        </MudTimeline>


        @if (Steps.Count > Step)
        {
            @Steps[Step].ChildContent
        }


    </CascadingValue>
    <MudStack Justify="Justify.SpaceBetween" Row="true">
        <MudButton Disabled="BackDisabled" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnBack.InvokeAsync">Voltar</MudButton>
        <MudButton Disabled="NextDisabled" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnNext.InvokeAsync">Avançar</MudButton>
    </MudStack>
</MudContainer>

@code {

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public int Step { get; set; } = 0;

    [Parameter]
    public bool BackDisabled { get; set; } = false;

    [Parameter]
    public bool NextDisabled { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<bool> OnNext { get; set; }

    [Parameter]
    public EventCallback<bool> OnBack { get; set; }

    public List<Step> Steps = new();

    public void AddStep(Step step)
    {
        Steps.Add(step);
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Step >= Steps.Count())
        {
            throw new ApplicationException("Step is greater than the number of steps");
        }
        base.OnAfterRender(firstRender);
    }

}