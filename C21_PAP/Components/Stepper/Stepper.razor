
    <CascadingValue Value="this">
        @ChildContent
        <MudContainer Style="overflow-x: auto;">
            <MudTimeline Style=@("min-height: 240px; min-width: " + (Steps.Count * 180).ToString() + "px;") TimelinePosition="TimelinePosition.Right" TimelineOrientation="TimelineOrientation.Horizontal">
                @for (int i = 0; i < Steps.Count; i += 1)
                {
                    var copy = i;
                    @Steps[copy].RenderStep(copy);
                }
            </MudTimeline>
        </MudContainer>

        @if (Steps.Count > Step)
        {
            @Steps[Step].ChildContent
        }
    </CascadingValue>
    <MudStack Justify="Justify.SpaceBetween" Row="true" Style="padding-top: 50px;">
        <MudButton Disabled="BackDisabled" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnBack.InvokeAsync">Voltar</MudButton>
        <MudButton Disabled="NextDisabled" Variant="Variant.Filled" Color="Color.Primary" OnClick="Next">Avançar</MudButton>
    </MudStack>


@code {

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public int Step { get; set; } = 0;
    
    [Parameter]
    public EventCallback<int> StepChanged { get; set; }

    [Parameter]
    public bool BackDisabled { get; set; } = false;

    [Parameter]
    public bool NextDisabled { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<bool> OnNext { get; set; }


    [Parameter]
    public EventCallback<bool> OnBack { get; set; }

    public List<Step> Steps = new();

    public void AddStep(Step step)
    {
        Steps.Add(step);
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Step >= Steps.Count())
        {
            throw new ApplicationException("Step is greater than the number of steps");
        }
        base.OnAfterRender(firstRender);
    }

    private async Task Next()
    {
        var nextIndexSublist = Steps.Skip(Step + 1).ToList().FindIndex(x => x.IsEnabled);
        if (Steps[Step].StepValidation == null || await Steps[Step].StepValidation.Invoke(Step))
        {
            if (nextIndexSublist == -1)
            {
                await OnNext.InvokeAsync(true);
            }
            else
            {
                Step = Steps.Skip(Step + 1).ToList().FindIndex(x => x.IsEnabled) + (Step + 1);
                await StepChanged.InvokeAsync(Step);
                await OnNext.InvokeAsync(false);
            }
        }
    }

}